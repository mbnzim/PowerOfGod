@model PowerOfGod.Domain.Entity.Event.Event

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutLess.cshtml";
}
<br /><br /><br /><br /><br />

<h2>Add Event</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
       
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <hr />
        @Html.Raw(TempData["Message"])
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Start, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Start, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Start, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.StartingTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartingTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartingTime, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.End, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.End, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.End, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Vanue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Vanue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Vanue, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.ThemeColor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ThemeColor, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ThemeColor, "", new { @class = "text-danger" })
            </div>*@
        @*</div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.ThemeColor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    List<SelectListItem> Color = new List<SelectListItem>();

                    Color.Add(new SelectListItem { Text = "blue", Value = "blue" });
                    Color.Add(new SelectListItem { Text = "grey", Value = "grey" });
                    Color.Add(new SelectListItem { Text = "black", Value = "black" });
                    Color.Add(new SelectListItem { Text = "pink", Value = "pink" });
                    Color.Add(new SelectListItem { Text = "red", Value = "red" });
                    Color.Add(new SelectListItem { Text = "yellow", Value = "yellow" });
                    Color.Add(new SelectListItem { Text = "green", Value = "green" });
                    Color.Add(new SelectListItem { Text = "orange", Value = "orange" });
                    Color.Add(new SelectListItem { Text = "purple", Value = "purple" });
                    Color.Add(new SelectListItem { Text = "brown", Value = "brown" });
                }
                @Html.DropDownListFor(m => m.ThemeColor, Color, "Select...COLOR")
                @Html.ValidationMessageFor(model => model.ThemeColor)
                @Html.ValidationMessageFor(model => model.ThemeColor)
                @Html.ValidationMessageFor(model => model.ThemeColor)
                @Html.ValidationMessageFor(model => model.ThemeColor)
                @Html.ValidationMessageFor(model => model.ThemeColor)
                @Html.ValidationMessageFor(model => model.ThemeColor)
                @Html.ValidationMessageFor(model => model.ThemeColor)
                @Html.ValidationMessageFor(model => model.ThemeColor)
                @Html.ValidationMessageFor(model => model.ThemeColor)
                @Html.ValidationMessageFor(model => model.ThemeColor, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsFullDay, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsFullDay)
                    @Html.ValidationMessageFor(model => model.IsFullDay, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<br /><br /><br />

<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
@section Scripts {
    <script src="~/Scripts/jquery-1.12.4.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")



    <script type="text/javascript">

        $(document).ready(function () {
            $('input[type=datetime]').datepicker({
                dateFormat: "dd/M/yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0",
                minDate: new Date(),
                singleMonth: true,



                beforeShowDay: function (t) {
                    var valid = t.getDay() !== 0; //disable sunday
                    var _class = '';
                    // var _tooltip = valid ? '' : 'weekends are disabled';
                    return [valid, _class];

                }
            });

        });


    </script>
}
@if (ViewBag.Message != null)
{
    <script type="text/javascript">
        window.onload = function () {
            alert("@ViewBag.Message");
        };
    </script>
}