@*@model IEnumerable<PowerOfGod.Domain.Entity.Employee.Roster>*@
@model PagedList.IPagedList<PowerOfGod.Domain.Entity.Employee.Roster>
@using PagedList.Mvc
@using PagedList


@if (User.IsInRole("SupperAdmin"))
{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_supadmin.cshtml";
}
else if (User.IsInRole("Administrator"))
{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_admin.cshtml";
}

<div style="margin-bottom:10%;"></div>
<h3 class="page-header"><i class="fa fa-list-alt"></i>Roster</h3>
<ol class="breadcrumb">
    <li><i class="fa fa-home"></i><a href="~/Dashboard/Dashboard">Home</a></li>
    <li><i class="fa fa-desktop"></i>Roster</li>
    <li><i class="fa fa-list-alt"></i>View Roster</li>
</ol>

@*<div>
        <label for="category">Contract</label>
        <select id="contract"></select>
        <label for="product">Employee</label>
        <select id="employee"></select>
    </div>*@

@*<p style="float:right;">
    @Html.ActionLink("Generate Roster", "AddEmployee", "Rosters", new { @class = "btn btn-default" })
</p>

@using (Html.BeginForm("Search", "Rosters", FormMethod.Get))
{
    <p>@Html.TextBox("search")</p>
    <p> <input type="submit" value="search" /></p>

}*@

<table class="table">
    <tr>
        @using (Html.BeginForm("Search", "Rosters", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            <th>
                @Html.Label("Search by department")
                @Html.TextBox("search")
            </th>
            <th>
                <p style="float:right;">
                    <input type="submit" class="btn btn-default" value="search">
                    @Html.ActionLink("Generate Roster", "AddEmployee", "Rosters", new { @class = "btn btn-default" })
                    </p>
            </th>
        }
    </tr>
</table>

<table class="table table-striped table-condensed table-bordered">
    <tr>
        <th>
            @Html.DisplayName("Department")
        </th>
        <th>
            @Html.DisplayName("Employee Name")
        </th>
        <th>
            @Html.DisplayName("Date")
        </th>
        <th>
            @Html.DisplayName("Start Time")
        </th>

        <th>
            @Html.DisplayName("End Time")
        </th>
        @*<th>
                @Html.DisplayName("Action")
            </th>*@
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.departments.deptName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.employees.firstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Date)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.startTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.endTime)
            </td>

            @*<td>
                    <div class="btn-group">
                        <a class="btn btn-default" href="" title="Bootstrap 3 themes generator">
                            <span class="icon_lightbulb_alt"></span>
                            Options
                        </a>
                        <a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="" title="Bootstrap 3 themes generator"><span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a href="">@Html.ActionLink("Modify", "Edit", new { id = item.code }) </a></li>
                            <li><a href="">@Html.ActionLink("Details", "Details", new { id = item.code }) </a></li>
                            <li><a href=""> @Html.ActionLink("Delete", "Delete", new { id = item.code }) </a></li>
                            <li><a href=""> @Html.ActionLink("QueueNumber", "QueueNumber", new { id = item.code }) </a></li>

                            <li class="divider"></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Cancel</a></li>
                        </ul>
                    </div>
                </td>*@
        </tr>
    }

</table>
<br />
<div style="text-align: center">
    <p>
        @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    </p>
    <p style="margin-top: -25px">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page }))
    </p>
</div>


@*@section scripts {
        <script type="text/javascript">
            $(document).ready(function () {
                // Get a list of categories and a list of products of the first category.
                $.getJSON('/Rosters/GetypeOfContracts', null, function (data) {
                    $.each(data, function () {
                        $('#contract').append('<option value=' +
                            this.typeCode + '>' + this.typeName + '</option>');
                    });
                    $.getJSON('/Rosters/GetEmployee', { typeCode: $('#contract').val() }, function (data) {
                        $.each(data, function () {
                            $('#employee').append('<option value=' +
                                this.EmpNum + '>' + this.firstName + '</option>');
                        });
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        alert('Error getting employees!');
                    });
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error getting contracts!');
                });

                // Dropdown list change event.
                $('#contract').change(function () {
                    $('#employee option').remove();
                    $.getJSON('/Rosters/GetEmployee', { typeCode: $('#contract').val() }, function (data) {
                        $.each(data, function () {
                            $('#employee').append('<option value=' +
                                this.EmpNum + '>' + this.firstName + '</option>');
                        });
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        alert('Error getting products!');
                    });
                });
            });
        </script>
    }*@
